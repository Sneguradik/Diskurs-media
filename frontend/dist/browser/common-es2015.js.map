{"version":3,"sources":["./src/app/shared/services/feed-resolver.service.ts","./src/app/api/schemas/event/event-currency.enum.ts","./src/app/api/schemas/event/event-filters.enum.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2C;AAIU;AAEuB;AAGV;;;;;;AAMlE,SAAS,wBAAwB,CAC/B,IAAiC,EACjC,aAA4B;IAE5B,MAAM,MAAM,GAAiC,EAAE,CAAC;IAChD,MAAM,SAAS,GAAa,EAAE,CAAC;IAC/B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAqB,EAAE,EAAE;QAC7C,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC7B,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC1C,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iEAAU,CAAC,GAAG,EAAE,CAAC,+CAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;aACxF;SACF;IACH,CAAC,CAAC,CAAC;IACH,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,0DAAa,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,qEAAc,CAAC,EAAE,CAAC,EAAE,0DAAG,CAAC,CAAC,SAA2B,EAAE,EAAE;QAClH,MAAM,OAAO,GAAiC,EAAE,CAAC;QACjD,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAqB,EAAE,EAAE;YAC7C,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7B,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAiB,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAe,CAAC,CAAC,CAAC;aAC/G;iBAAM;gBACL,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;aAC/B;QACH,CAAC,CAAC,CAAC;QACH,uCAAY,IAAI,KAAE,OAAO,IAAG;IAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,+CAAE,iCAAM,IAAI,KAAE,OAAO,EAAE,EAAE,IAAG,CAAC;AACrC,CAAC;AAKM,MAAM,mBAAmB;IAC9B,YACmB,WAAwB,EACxB,eAAgC,EAChC,aAA4B,EAC5B,YAA0B;QAH1B,gBAAW,GAAX,WAAW,CAAa;QACxB,oBAAe,GAAf,eAAe,CAAiB;QAChC,kBAAa,GAAb,aAAa,CAAe;QAC5B,iBAAY,GAAZ,YAAY,CAAc;IACzC,CAAC;IAEL,OAAO,CAAC,KAA6B;QACnC,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;YACjC,MAAM,IAAI,GAAW,KAAK,CAAC,YAAY,CAAC,GAAG,CACzC,CAAC,GAA2B,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,OAAmB,EAAE,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,CACzF,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACvB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBACzB,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,+EAAa,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAC/E,gEAAS,CAAC,CAAC,OAAoC,EAAE,EAAE,CAAC,wBAAwB,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,EAC1G,0DAAG,CAAC,CAAC,IAA+C,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CACvE,CAAC;aACH;YACD,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;gBAC7B,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,+EAAa,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAC1G,gEAAS,CAAC,CAAC,OAAoC,EAAE,EAAE,CAAC,wBAAwB,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,EAC1G,0DAAG,CAAC,CAAC,IAA+C,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CACvE,CAAC;aACH;YACD,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBAC3B,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,+EAAa,CAAC,IAAI,EAAE,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CACxG,gEAAS,CAAC,CAAC,OAAoC,EAAE,EAAE,CAAC,wBAAwB,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,EAC1G,0DAAG,CAAC,CAAC,IAA+C,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CACvE,CAAC;aACH;YACD,IAAI,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBACzD,OAAO,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAC1D,gEAAS,CAAC,CAAC,IAAmB,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,+EAAa,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAC/H,gEAAS,CAAC,CAAC,OAAoC,EAAE,EAAE,CAAC,wBAAwB,CAAC,OAAO,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,EAC1G,0DAAG,CAAC,CAAC,IAA+C,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CACvE,CAAC;aACH;SACF;QACD,OAAO,+CAAE,CAAC,EAAE,CAAC,CAAC;IAChB,CAAC;;oMAxCU,mBAAmB;wMAAnB,mBAAmB,cAFlB,MAAM;+KAEP,mBAAmB;kBAH/B,wDAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;;;;;;;;;;;AC5CD;AAAA;AAAA,IAAY,iBAMX;AAND,WAAY,iBAAiB;IACzB,kCAAa;IACb,gCAAW;IACX,gCAAW;IACX,gCAAW;IACX,kCAAa;AACjB,CAAC,EANW,iBAAiB,KAAjB,iBAAiB,QAM5B;;;;;;;;;;;;;ACND;AAAA;AAAA,IAAY,gBAUX;AAVD,WAAY,gBAAgB;IACxB,+BAAW;IACX,mCAAe;IACf,+CAA2B;IAC3B,yCAAqB;IACrB,yCAAqB;IACrB,2CAAuB;IACvB,mDAA+B;IAC/B,+CAA2B;IAC3B,qCAAiB;AACrB,CAAC,EAVW,gBAAgB,KAAhB,gBAAgB,QAU3B","file":"common-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FeedService } from '@api/routes/feed.service';\nimport { ActivatedRouteSnapshot, UrlSegment } from '@angular/router';\nimport { IArticleView } from '@api/schemas/article/article-view.interface';\nimport { Observable, of, combineLatest } from 'rxjs';\nimport { PlatformService } from './platform.service';\nimport { switchMap, map, defaultIfEmpty, catchError } from 'rxjs/operators';\nimport { IPageResponse } from '@api/schemas/page/page-response.interface';\nimport { TopicsService } from '@api/routes/topics.service';\nimport { FeedOrderEnum } from '@api/schemas/feed/feed-order.enum';\nimport { ITopicView } from '@api/schemas/topic/topic-view.interface';\nimport { UsersService } from '@api/routes/users.service';\nimport { IUserViewFull } from '@api/schemas/user/user-view-full.interface';\nimport { ITopicViewFull } from '@api/schemas/topic/topic-view-full.interface';\n\nfunction fetchArticlesWithTopics$(\n  page: IPageResponse<IArticleView>,\n  topicsService: TopicsService\n): Observable<IPageResponse<[IArticleView, ITopicView]>> {\n  const topics: Observable<ITopicViewFull>[] = [];\n  const topicsIds: number[] = [];\n  page.content.forEach((article: IArticleView) => {\n    if (article.topics.length > 0) {\n      if (!topicsIds.includes(article.topics[0])) {\n        topicsIds.push(article.topics[0]);\n        topics.push(topicsService.getOne$(article.topics[0]).pipe(catchError(() => of(null))));\n      }\n    }\n  });\n  return page.content.length > 0 ? combineLatest(topics).pipe(defaultIfEmpty([]), map((topicsRet: ITopicViewFull[]) => {\n    const content: [IArticleView, ITopicView][] = [];\n    page.content.forEach((article: IArticleView) => {\n      if (article.topics.length > 0) {\n        content.push([article, topicsRet.find((x: ITopicViewFull) => x.meta.id === article.topics[0]) as ITopicView]);\n      } else {\n        content.push([article, null]);\n      }\n    });\n    return { ...page, content };\n  })) : of({ ...page, content: [] });\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FeedResolverService {\n  constructor(\n    private readonly feedService: FeedService,\n    private readonly platformService: PlatformService,\n    private readonly topicsService: TopicsService,\n    private readonly usersService: UsersService\n  ) { }\n\n  resolve(route: ActivatedRouteSnapshot): Observable<[IArticleView, ITopicView][]> {\n    if (this.platformService.isServer) {\n      const path: string = route.pathFromRoot.map(\n        (ars: ActivatedRouteSnapshot) => ars.url.map((segment: UrlSegment) => segment.toString()\n      ).join('/')).join('/');\n      if (path.includes('/all')) {\n        return this.feedService.feedRequest$({ order: FeedOrderEnum.TIME, page: 0 }).pipe(\n          switchMap((article: IPageResponse<IArticleView>) => fetchArticlesWithTopics$(article, this.topicsService)),\n          map((page: IPageResponse<[IArticleView, ITopicView]>) => page.content),\n        );\n      }\n      if (path.includes('/topics/')) {\n        return this.feedService.feedRequest$({ order: FeedOrderEnum.TIME, topic: route.params['id'], page: 0 }).pipe(\n          switchMap((article: IPageResponse<IArticleView>) => fetchArticlesWithTopics$(article, this.topicsService)),\n          map((page: IPageResponse<[IArticleView, ITopicView]>) => page.content)\n        );\n      }\n      if (path.includes('/tags/')) {\n        return this.feedService.feedRequest$({ order: FeedOrderEnum.TIME, tag: route.params['id'], page: 0 }).pipe(\n          switchMap((article: IPageResponse<IArticleView>) => fetchArticlesWithTopics$(article, this.topicsService)),\n          map((page: IPageResponse<[IArticleView, ITopicView]>) => page.content),\n        );\n      }\n      if (path.includes('/company/') || path.includes('/user/')) {\n        return this.usersService.getSingle$(route.params['id']).pipe(\n          switchMap((user: IUserViewFull) => this.feedService.feedRequest$({ order: FeedOrderEnum.TIME, author: user.meta.id, page: 0 })),\n          switchMap((article: IPageResponse<IArticleView>) => fetchArticlesWithTopics$(article, this.topicsService)),\n          map((page: IPageResponse<[IArticleView, ITopicView]>) => page.content)\n        );\n      }\n    }\n    return of([]);\n  }\n}\n","export enum EventCurrencyEnum {\n    FREE = 'FREE',\n    RUB = 'RUB',\n    USD = 'USD',\n    EUR = 'EUR',\n    NONE = 'NONE'\n}\n","export enum EventFiltersEnum {\n    ALL = 'ALL',\n    OTHER = 'OTHER',\n    EXHIBITIONS = 'EXHIBITIONS',\n    TRAINING = 'TRAINING',\n    REGATTAS = 'REGATTAS',\n    FLOTILLAS = 'FLOTILLAS',\n    PRESENTATIONS = 'PRESENTATIONS',\n    CONFERENCES = 'CONFERENCES',\n    FORUMS = 'FORUMS',\n}\n"],"sourceRoot":"webpack:///"}